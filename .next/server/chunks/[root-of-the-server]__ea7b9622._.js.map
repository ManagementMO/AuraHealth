{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/MohammedElshrief/Downloads/AuraHealth/src/app/api/hume/token/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\ninterface HumeTokenResponse {\r\n  accessToken?: string;\r\n  error?: string;\r\n}\r\n\r\nexport async function GET(): Promise<Response> {\r\n  try {\r\n    // Validate environment variables\r\n    const apiKey = process.env.HUME_API_KEY;\r\n    const clientSecret = process.env.HUME_CLIENT_SECRET;\r\n\r\n    if (!apiKey || !clientSecret) {\r\n      console.error('Missing Hume AI credentials in environment variables');\r\n      return NextResponse.json(\r\n        { error: 'Server configuration error' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Generate access token using Hume AI credentials\r\n    // This follows Hume AI's authentication flow for generating short-lived tokens\r\n    const tokenResponse = await fetch('https://api.hume.ai/oauth2-cc/token', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Accept': 'application/json',\r\n      },\r\n      body: new URLSearchParams({\r\n        grant_type: 'client_credentials',\r\n        client_id: apiKey,\r\n        client_secret: clientSecret,\r\n      }),\r\n    });\r\n\r\n    if (!tokenResponse.ok) {\r\n      console.error('Failed to generate Hume AI token:', tokenResponse.status, tokenResponse.statusText);\r\n      return NextResponse.json(\r\n        { error: 'Failed to authenticate with Hume AI' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const tokenData = await tokenResponse.json();\r\n    \r\n    if (!tokenData.access_token) {\r\n      console.error('Invalid token response from Hume AI');\r\n      return NextResponse.json(\r\n        { error: 'Invalid authentication response' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Return the access token to the client\r\n    const response: HumeTokenResponse = {\r\n      accessToken: tokenData.access_token,\r\n    };\r\n\r\n    return NextResponse.json(response, {\r\n      status: 200,\r\n      headers: {\r\n        'Cache-Control': 'no-store, no-cache, must-revalidate',\r\n        'Pragma': 'no-cache',\r\n      },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error generating Hume AI token:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;;AAOO,eAAe;IACpB,IAAI;QACF,iCAAiC;QACjC,MAAM,SAAS,QAAQ,GAAG,CAAC,YAAY;QACvC,MAAM,eAAe,QAAQ,GAAG,CAAC,kBAAkB;QAEnD,IAAI,CAAC,UAAU,CAAC,cAAc;YAC5B,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAElB;QAEA,kDAAkD;QAClD,+EAA+E;QAC/E,MAAM,gBAAgB,MAAM,MAAM,uCAAuC;YACvE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,UAAU;YACZ;YACA,MAAM,IAAI,gBAAgB;gBACxB,YAAY;gBACZ,WAAW;gBACX,eAAe;YACjB;QACF;QAEA,IAAI,CAAC,cAAc,EAAE,EAAE;YACrB,QAAQ,KAAK,CAAC,qCAAqC,cAAc,MAAM,EAAE,cAAc,UAAU;YACjG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,YAAY,MAAM,cAAc,IAAI;QAE1C,IAAI,CAAC,UAAU,YAAY,EAAE;YAC3B,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,wCAAwC;QACxC,MAAM,WAA8B;YAClC,aAAa,UAAU,YAAY;QACrC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;YACjC,QAAQ;YACR,SAAS;gBACP,iBAAiB;gBACjB,UAAU;YACZ;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}